Page Object Model (POM) Implementation (day47)

Overview
- Purpose: Implement Page Object Model design pattern for maintainable and reusable test automation.
- Files: CreatingPageObjectModel.java, LoginPage.java, LoginPage2.java, LoginTest.java, testng.xml, testng2.xml

Page Object Model (POM)
- Design pattern that encapsulates page elements and actions in separate classes
- Benefits: Code reusability, maintainability, separation of concerns, reduced duplication
- Structure: Each page has its own class with elements and methods
- Locators: Centralized element identification using By locators
- Actions: Methods that perform operations on page elements

Key Components
- Page Classes: Contain page elements and action methods
- Test Classes: Use page objects to perform test operations
- Base Page: Common functionality shared across pages
- Utilities: Helper methods for common operations

Examples Explained
1) LoginPage.java / LoginPage2.java
- Page object classes for login functionality
- Contains locators for username, password, login button
- Methods for entering credentials and clicking login
- Validation methods for login success/failure

2) CreatingPageObjectModel.java
- Demonstrates POM implementation without external dependencies
- Shows how to structure page objects and test classes
- Basic POM concepts and best practices

3) LoginTest.java
- Test class using page objects
- Demonstrates how tests become more readable and maintainable
- Shows separation of test logic from page interaction logic

4) testng.xml / testng2.xml
- TestNG configuration for running POM-based tests
- Suite organization for page object tests

Good Practices
- One page object per page/section of the application
- Keep page objects focused on single responsibility
- Use meaningful method names that describe actions
- Return page objects from action methods for method chaining
- Avoid assertions in page objects; keep them in test classes
- Use factory pattern for page object creation

External Learning Resources
- Page Object Model Pattern: https://www.selenium.dev/documentation/test_practices/page_object_models/
- Selenium Best Practices: https://www.selenium.dev/documentation/test_practices/
- TestNG with Page Objects: https://testng.org/doc/documentation-main.html
- Design Patterns in Test Automation: https://martinfowler.com/articles/practical-test-pyramid.html
- Selenium WebDriver Documentation: https://www.selenium.dev/documentation/webdriver/

